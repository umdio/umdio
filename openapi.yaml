openapi: 3.0.1
info:
  title: umd.io
  description: >-
    Welcome to umd.io, the open-source API for University of Maryland data. If
    you are building a University data-focused app, hack, or project, you’re in
    the right place. This site will walk you through basic API use and document
    all supported API calls.


    umd.io is a GETful API. It follows RESTful conventions, but for now, you can
    only get data – you can’t create, update, or destroy.


    We're now in version 1! We might add new endpoints or more data to existing responses,
    but we won't remove anything without a major version change.


    We are actively looking for contributors! Tweet, email, or otherwise get in
    touch with us.
  contact:
    email: hi@umd.io
  license:
    name: MIT
    url: "https://github.com/umdio/umdio/LICENSE"
  version: 1.0.0
externalDocs:
  description: Github
  url: "https://github.com/umdio/umdio"
servers:
  - url: "https://api.umd.io/v1"
tags:
  - name: courses
    description: Course data from Testudo
  - name: professors
    description: Data about professors and courses they teach
  - name: bus
    description: Bus data
  - name: map
    description: Data about things on campus, such as buildings, dining halls, and other facilities.
  - name: majors
    description: Data about the various majors offered on campus.
paths:
  /courses:
    get:
      tags:
        - courses
      summary: List courses
      description: Returns paginated list of courses
      operationId: getCourses
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Course"
  /courses/list:
    get:
      tags:
        - courses
      summary: List courses
      description: Returns list of all minimized courses
      operationId: getCourses
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Course"
  /courses/sections:
    get:
      tags:
        - courses
      summary: List sections
      description: Returns paginated list of sections
      operationId: getSections
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Section"
  /courses/sections/{section_ids}:
    get:
      tags:
        - courses
      summary: List sections
      description: Returns paginated list of sections
      operationId: getSections
      parameters:
        - in: path
          name: section_ids
          required: true
          schema:
            type: array
            items:
              type: string
          description: One or more comma separated section ids
          explode: true
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Section"
  /courses/{course_ids}:
    get:
      tags:
        - courses
      summary: View course
      description: Returns info about one or more courses
      operationId: getCoursesById
      parameters:
        - in: path
          name: course_ids
          required: true
          schema:
            type: array
            items:
              type: string
          description: One or more comma separated course ids
          explode: true
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Course"
  /courses/{course_ids}/sections:
    get:
      tags:
        - courses
      summary: View course
      description: Returns info about one or more courses
      operationId: getCourseSectionsById
      parameters:
        - in: path
          name: course_ids
          required: true
          schema:
            type: array
            items:
              type: string
          description: One or more comma separated course ids
          explode: true
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Section"
  /courses/{course_ids}/sections/{section_ids}:
    get:
      tags:
        - courses
      summary: View course
      description: Returns info about one or more courses
      operationId: getCourseSectionsById
      parameters:
        - in: path
          name: course_ids
          required: true
          schema:
            type: array
            items:
              type: string
          description: One or more comma separated course ids
          explode: true
        - in: path
          name: section_ids
          required: true
          schema:
            type: array
            items:
              type: string
          description: One or more comma separated section ids
          explode: true
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Section"
  /courses/semesters:
    get:
      tags:
        - courses
      summary: List semesters
      description: Returns list of all available semesters
      operationId: getSemesters
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /courses/departments:
    get:
      tags:
        - courses
      summary: List departments
      description: Returns list of all available departments
      operationId: getDepartments
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /professors:
    get:
      tags:
        - professors
      summary: List professors
      description: Returns list of all professors
      operationId: getProfessors
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Professor"
  /majors/list:
    get:
      tags:
        - majors
      summary: List majors
      description: Get a list of all majors
      operationId: getMajors
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Major"
  /map/buildings:
    get:
      tags:
        - map
      summary: List buildings
      description: Get a list of the available buildings.
      operationId: getBuildings
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Building"
  /map/buildings/{building_id}:
    get:
      tags:
        - map
      summary: Get buildings
      description: >-
        Get location data about one or more buildings. Comma separated building
        numbers are the parameters.
      operationId: getBuildingById
      parameters:
        - in: path
          name: building_id
          required: true
          schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
            example: 226
          description: Numeric building ID
          explode: true
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Building"
                  count:
                    type: number
                    description: Number of buildings returned
                    example: 1
        "400":
          description: Malformed building code
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Unknown building code
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /bus/routes:
    get:
      tags:
        - bus
      summary: List routes
      description: Get a list of the available routes.
      operationId: getRoutes
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    route_id:
                      type: string
                    title:
                      type: string
  /bus/routes/{route_ids}:
    get:
      tags:
        - bus
      summary: Get buses
      description: Get route data for one or more routes
      operationId: getRoutesById
      parameters:
        - in: path
          name: route_ids
          required: true
          schema:
            type: array
            items:
              type: string
          description: Route ids
          explode: true
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Route"
                  count:
                    type: number
                    description: Number of routes returned
                    example: 1
        "400":
          description: Malformed route code
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Unknown route code
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /bus/stops:
    get:
      tags:
        - bus
      summary: List stops
      description: Get a list of the available stops.
      operationId: getStops
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    stop_id:
                      type: string
                    title:
                      type: string
  /bus/stops/{stop_ids}:
    get:
      tags:
        - bus
      summary: Get stops
      description: Get data for one or more stops
      operationId: getStopsById
      parameters:
        - in: path
          name: stop_ids
          required: true
          schema:
            type: array
            items:
              type: string
          description: Stop ids
          explode: true
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Stop"
                  count:
                    type: number
                    description: Number of routes returned
                    example: 1
        "400":
          description: Malformed route code
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Unknown route code
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /bus/locations:
    get:
      tags:
        - bus
      summary: Current bus locations
      description: Get bus locations
      operationId: getLocations
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: string
  /bus/routes/{route_id}/locations:
    get:
      tags:
        - bus
      summary: Current bus locations
      description: Get bus locations
      operationId: getLocations
      parameters:
        - in: path
          name: route_id
          required: true
          schema:
            type: string
          description: Route id
          explode: true
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: string
  /bus/routes/{route_id}/schedules:
    get:
      tags:
        - bus
      summary: Bus schedules
      description: Get bus schedules
      operationId: getLocations
      parameters:
        - in: path
          name: route_id
          required: true
          schema:
            type: string
          description: Route id
          explode: true
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: string
  /bus/routes/{route_id}/arrivals/{stop_id}:
    get:
      tags:
        - bus
      summary: Current bus locations
      description: Get bus locations
      operationId: getLocations
      parameters:
        - in: path
          name: route_id
          required: true
          schema:
            type: string
          description: Route id
          explode: true
        - in: path
          name: stop_id
          required: true
          schema:
            type: string
          description: Stop id
          explode: true
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: string

components:
  schemas:
    Route:
      type: object
      description: Bus route
      properties:
        route_id:
          type: string
        title:
          type: string
        stops:
          type: array
          items:
            $ref: "#/components/schemas/Stop"
        directions:
          type: array
          items:
            type: object
            properties:
              direction_id:
                type: string
              title:
                type: string
              stops:
                type: array
                items:
                  type: string
        paths:
          type: array
          items:
            type: array
            items:
              type: object
              properties:
                lat:
                  type: number
                  format: float
                long:
                  type: number
                  format: float
        lat_max:
          type: number
          format: float
        lat_min:
          type: number
          format: float
        long_max:
          type: number
          format: float
        long_min:
          type: number
          format: float
    Stop:
      type: object
      description: Bus stop
      properties:
        stop_id:
          type: string
        title:
          type: string
        lat:
          type: number
          format: float
        long:
          type: number
          format: float
    Course:
      type: object
      description: Represents a course on Testudo
      properties:
        course_id:
          type: string
        semester:
          type: string
        name:
          type: string
        dept_id:
          type: string
        department:
          type: string
        credits:
          type: string
        description:
          type: string
        grading_method:
          type: array
          items:
            type: string
        gen_ed:
          type: array
          items:
            type: array
            items:
              type: string
        core:
          type: array
          items:
            type: string
        relationships:
          type: object
          properties:
            coreqs:
              type: string
              nullable: true
            prereqs:
              type: string
              nullable: true
            formerly:
              type: string
              nullable: true
            restrictions:
              type: string
              nullable: true
            additional_info:
              type: string
              nullable: true
            also_offered_as:
              type: string
              nullable: true
            credit_granted_for:
              type: string
              nullable: true
        sections:
          type: array
          items:
            oneOf:
              - type: string
              - $ref: "#/components/schemas/Section"
    Section:
      type: object
      properties:
        course:
          type: string
        section_id:
          type: string
        semester:
          type: string
        number:
          type: string
        seats:
          type: string
        meetings:
          type: array
          items:
            $ref: "#/components/schemas/Meeting"
        open_seats:
          type: string
        waitlist:
          type: string
        instructors:
          type: array
          items:
            type: string
    Meeting:
      type: object
      properties:
        days:
          type: string
        room:
          type: string
        building:
          type: string
        classtype:
          type: string
        start_time:
          type: string
        end_time:
          type: string
    Professor:
      type: object
      description: Represents a professor
      properties:
        name:
          type: string
          description: Professor's name on Testudo
          example: ""
        taught:
          type: array
          items:
            type: object
            properties:
              semester:
                type: integer
                example: 202001
              course:
                type: string
                example: ""
    Major:
      type: object
      description: Represents a major
      properties:
        major_id:
          type: number
          description: Numeric id of a major. No real meaning here, just an ascending count.
          example: 19
        name:
          type: string
          description: The name of the major.
          example: Behavioral and Community Health
        college:
          type: string
          description: The college the major is under.
          example: School of Public Health
        url:
          type: string
          description: Home page for the major.
          example: http://sph.umd.edu/department/bch/
    Building:
      type: object
      description: Represents a building on campus.
      properties:
        name:
          type: string
          description: Name of the building
          example: Edward St. John Learning and Teaching Center
        code:
          type: string
          description: Shortened building code. Not all buildings have these.
          example: ESJ
        number:
          type: string
          description: Unique building id
          example: 226
        long:
          type: number
          description: Longitude
          example: -76.941914
        lat:
          type: number
          description: Latitude
          example: 38.986699
    Error:
      type: object
      description: Represents an HTTP error
      properties:
        error_code:
          type: number
        message:
          type: string
        docs:
          type: string
